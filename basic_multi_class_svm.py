# -*- coding: utf-8 -*-
"""basic multi class SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bzCoHVcuADBGY9IwdmN2vorMquRYqiDT
"""

import numpy as np
import matplotlib.pyplot as plt
import cvxpy as cp

n=200
c1=np.random.normal((1,1),1,(n,2))
c2=np.random.normal((5,5),1,(n,2))
c3=np.random.normal((9,0),1,(n,2))

plt.plot(c1[:,0],c1[:,1],'o')
plt.plot(c2[:,0],c2[:,1],'o')
plt.plot(c3[:,0],c3[:,1],'o')

#l=np.arange(0,1,0.001)
#plt.plot(l,1-l,'--')

t = cp.Variable()

b_sol=[]
a_sol=[]
cl=[c1,c2,c3]
for i in range(0,3):    
  b = cp.Variable()
  a = cp.Variable(2)
  objective = cp.Minimize(-t)
  constraints = [cl[i] @ a<=b-t, np.vstack((cl[(i+1)%3],cl[(i-1)%3])) @a >= b+t, cp.norm2(a)**2<=1]
#constraints = [X_zeros @ a<=b-t, X_ones @a >= b+t]
  prob = cp.Problem(objective, constraints)
  max_margin = prob.solve()
  a_sol.append(a.value)
  b_sol.append(b.value)

a_sol[0][]

plt.plot(c1[:,0],c1[:,1],'o')
plt.plot(c2[:,0],c2[:,1],'o')
plt.plot(c3[:,0],c3[:,1],'o')
x = np.arange(0,10,0.001)
#plt.plot(x,1-x,'--')
plt.plot(x, (b_sol[0]-a_sol[0][0]*x)/a_sol[0][1],'b-')
plt.plot(x, (b_sol[1]-a_sol[1][0]*x)/a_sol[1][1],'r-')
plt.plot(x, (b_sol[2]-a_sol[2][0]*x)/a_sol[2][1],'g-')